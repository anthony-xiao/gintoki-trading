integration test for data-ingetsion

docker compose run --rm historical-fetcher python -m src.py.data_ingestion.historical_data_fetcher tickers AAPL --start 2020-01-01 --end 2020-01-02

check if historical fether is meant to ship data to s3


High-Frequency Momentum Triangulation
For scalping strategies (<5-minute hold times), the optimal combination integrates:
	1.	Hull Moving Average (9-period) - Smoothed trend identification
	2.	Stochastic RSI (3,3,14) - Overbought/oversold zones
	3.	Volume-Weighted MACD (12,26,9) - Momentum confirmation
Backtests on SPY 1-minute data (2015-2024) show this trio generates 5.8 Sharpe ratio with 68% win rate when:
	•	HMA slope > 45 degrees
	•	Stoch RSI crosses 20/80 with MACD histogram expansion
Machine Learning-Enhanced Mean Reversion
For index futures arbitrage, the system combines:
	1.	Z-Score Bollinger Bands (2σ, 20-period)
	2.	Fisher Transform (10-period)
	3.	Machine Learning Regime Filter (LSTM volatility classifier)
This hybrid approach yielded 27% annualized returns in backtests by identifying 82% of 15-minute VIX contango/backwardation shifts.
Sentiment-Driven Breakout System
Integrating alternative data streams:
	1.	News Sentiment Score (BERT-based NLP model)
	2.	Options Flow Imbalance (put/call ratio delta)
	3.	Institutional Order Cluster Detection (time & sales anomalies)
Live trials on NVDA and TSLA demonstrated 73% accuracy in predicting 30-minute breakout directions when sentiment score exceeded 1.5σ of 10-day average.

Here is our current plan 

graph TD
    A[Polygon.io Real-time Data] -->|Done| B(Node.js Data Ingestor)
    B -->|Done| C{AWS S3 Historical Storage}
    C -->|Partial| D[Python Training Cluster]
    D -->|Not Started| E[SHAP Feature Optimizer]
    E -->|Not Started| F[LSTM Model Factory]
    F -->|Not Started| G[Alpaca Execution Engine]
    G -->|Not Started| H[Performance Monitor]
    H -->|Not Started| D

using the above. now that i have A->B->C all done with the github links below for each file. lets move on the the next steps C->D. Please give me a summary of what this section is responsible for and a high level summary of what our logic is for this. also what data are we consuming for this, is all of that data already done in sections A->B->C. 

for the implementation remember to give me the FULL code files so i can just copy and paste everything. 

because we are now getting into model training please make sure you go all the way back to you first response as to what is in research the best apporaches to algorithmic trading and based the model around those apporaches 


https://github.com/anthony-xiao/gintoki-trading/blob/main/.github/workflows/ci.yml 
https://github.com/anthony-xiao/gintoki-trading/blob/main/src/js/core/services/data-engineering/polygon-realtime.mjs

https://github.com/anthony-xiao/gintoki-trading/blob/main/requirements.txt

https://github.com/anthony-xiao/gintoki-trading/blob/main/docker-compose.yml

https://github.com/anthony-xiao/gintoki-trading/blob/main/Makefile

https://github.com/anthony-xiao/gintoki-trading/blob/main/Dockerfile

https://github.com/anthony-xiao/gintoki-trading/blob/main/src/py/util/corporate_actions.py

https://github.com/anthony-xiao/gintoki-trading/blob/main/src/py/util/api_client.py

https://github.com/anthony-xiao/gintoki-trading/blob/main/src/py/data_ingestion/historical_data_fetcher.py

https://github.com/anthony-xiao/gintoki-trading/blob/main/src/js/core/services/data-engineering/tick-processor.mjs

https://github.com/anthony-xiao/gintoki-trading/blob/main/src/js/core/services/data-engineering/test-tick-processor.mjs

https://github.com/anthony-xiao/gintoki-trading/blob/main/src/js/core/services/data-engineering/technical-indicators.mjs

https://github.com/anthony-xiao/gintoki-trading/blob/main/src/js/core/services/data-engineering/polygon-realtime.mjs



graph TD
    C[S3 Data] --> D1(LSTM Volatility Regime Detector)
    D1 --> D2(SHAP Feature Optimizer)
    D2 --> D3(Ensemble Mean Reversion Engine)
    D3 --> D4(Execution Signal Generator)



graph TD
    A[Polygon.io Real-time Data] -->|Done| B(Node.js Data Ingestor)
    B -->|Done| C{AWS S3 Historical Storage}
    C --> D1(LSTM Volatility Regime Detector)
    D1 --> D2(SHAP Feature Optimizer)
    D2 --> D3(Transformer Trend Analyzer)  <!-- NEW -->
    D3 --> D4(Adaptive Ensemble Engine)    <!-- MODIFIED -->
    D4 --> F[LSTM+Transformer Model Factory]
    F --> G[Alpaca Execution Engine]
    G --> H[Performance Monitor]
    H --> D1  <!-- Feedback loop -->


Took out 'bid_ask_spread' as a required column in data loader. may need to add it back Use Corwin-Schultz estimator from OHLC when quotes are missing: